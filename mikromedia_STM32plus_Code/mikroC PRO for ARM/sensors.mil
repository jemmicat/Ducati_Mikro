_Sensors_Init:
  begin   (midx: 0)
//sensors.c,21 :: 		void Sensors_Init(){
_Sensors_Init:
  begin   (midx: 0)
//sensors.c,22 :: 		Sensors_counter = 3100;
	R1 <2> <- 3100   (midx: 0)
	R0 <4> <- addr(sensors_Sensors_counter)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
//sensors.c,24 :: 		GPIO_Analog_Input(&GPIOF_BASE, _GPIO_PINMASK_8);
	R1 <4> <- 256   (midx: 0)
	R0 <4> <- #GPIOF_BASE   (midx: 0)
	CALL _GPIO_Analog_Input   (midx: 0)
//sensors.c,25 :: 		GPIO_Analog_Input(&GPIOF_BASE, _GPIO_PINMASK_9);
	R1 <4> <- 512   (midx: 0)
	R0 <4> <- #GPIOF_BASE   (midx: 0)
	CALL _GPIO_Analog_Input   (midx: 0)
//sensors.c,27 :: 		ADC3_Init();                        // Initialize ADC
	CALL _ADC3_Init   (midx: 0)
//sensors.c,29 :: 		FULL_BackLight = 1;
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(sensors_FULL_BackLight)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//sensors.c,30 :: 		current_intensity = 255;
	R1 <1> <- 255   (midx: 0)
	R0 <4> <- addr(sensors_current_intensity)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
  end
   (midx: 0)
_RedrawLabel:
  begin   (midx: 0)
//sensors.c,40 :: 		void RedrawLabel(unsigned int BackGround_Color, Tlabel *Label, unsigned int Xoffset, unsigned int Yoffset){
_RedrawLabel:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R0   (midx: 0)
	FARG_RedrawLabel_Label <4> <- R1   (midx: 0)
	R8 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R9 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//sensors.c,41 :: 		TFT_Set_Brush(1, BackGround_Color, 0, 0, 0, 0);
	R5 <2> <- 0   (midx: 0)
	R4 <2> <- 0   (midx: 0)
	R3 <1> <- 0   (midx: 0)
	R2 <1> <- 0   (midx: 0)
	R1 <2> <- R7   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	FARG_TFT_Set_Brush_gradient_color_to <2> <- PUSH(R5)   (midx: 0)
	FARG_TFT_Set_Brush_gradient_color_from <2> <- PUSH(R4)   (midx: 0)
	CALL _TFT_Set_Brush   (midx: 0)
//sensors.c,42 :: 		TFT_Set_Pen(BackGround_Color, 0);
	R1 <1> <- 0   (midx: 0)
   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _TFT_Set_Pen   (midx: 0)
//sensors.c,43 :: 		TFT_Rectangle(label->Left, Label->Top, label->Left + Xoffset, Label->Top + Yoffset);
	R4 <4> <- FARG_RedrawLabel_Label   (midx: 0)
	R4 <4> <-  R4 + 8   (midx: 2)
	R5 <2> <- *R4   (midx: 0)
   (midx: 0)
	R7 <2> <-  R5 + R9   (midx: 1)
	R4 <4> <- FARG_RedrawLabel_Label   (midx: 0)
	R4 <4> <-  R4 + 6   (midx: 2)
	R4 <2> <- *R4   (midx: 0)
   (midx: 0)
	R6 <2> <-  R4 + R8   (midx: 1)
	R5 <2> <- R5   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	R3 <2> <- R7   (midx: 0)
	R2 <2> <- R6   (midx: 0)
	R1 <2> <- R5   (midx: 0)
	R0 <2> <- R4   (midx: 0)
	CALL _TFT_Rectangle   (midx: 0)
//sensors.c,44 :: 		DrawLabel(Label);
	R0 <4> <- FARG_RedrawLabel_Label   (midx: 0)
	CALL _DrawLabel   (midx: 0)
  end
   (midx: 0)
sensors_Display_Temp:
  begin   (midx: 0)
//sensors.c,54 :: 		static void Display_Temp(unsigned long temperature, char CF){
sensors_Display_Temp:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//sensors.c,58 :: 		LongWordToStr(temperature, text1);
	R2 <4> <- addr(sensors_Display_Temp_text1_L0)   (midx: 0)
	R1 <4> <- R2   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	CALL _LongWordToStr   (midx: 0)
//sensors.c,59 :: 		ptr1 = text1;
	R2 <4> <- addr(sensors_Display_Temp_text1_L0)   (midx: 0)
   (midx: 0)
	R0 <4> <- R2   (midx: 0)
//sensors.c,60 :: 		if (CF == 0)
	if ( R6 != 0) then goto 0   (midx: 0)
//sensors.c,61 :: 		ptr2 = Diagram5_Label2.Caption;
	R2 <4> <- addr(_Diagram5_Label2+16)   (midx: 0)
   (midx: 0)
	R1 <4> <- [R2]   (midx: 0)
   (midx: 0)
	R4 <4> <- R1   (midx: 0)
	goto	1   (midx: 0)
0:   (midx: 0)
//sensors.c,63 :: 		ptr2 = Diagram5_Label5.Caption;
	R2 <4> <- addr(_Diagram5_Label5+16)   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <4> <- [R2]   (midx: 0)
	R4 <4> <- R1   (midx: 0)
1:   (midx: 0)
//sensors.c,65 :: 		while (*ptr1){
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R0 <1> <- R6   (midx: 0)
	R4 <4> <- R4   (midx: 0)
2:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <1> <- *R1   (midx: 0)
	if (!R2) then goto 3   (midx: 0)
//sensors.c,66 :: 		if (*ptr1 != ' ')
	R2 <1> <- *R1   (midx: 0)
	if ( R2 = 32) then goto 35   (midx: 0)
//sensors.c,67 :: 		*ptr2++ = *ptr1;
	R2 <1> <- *R1   (midx: 0)
	[R4] <1> <- R2   (midx: 0)
	R4 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	goto	4   (midx: 0)
35:   (midx: 0)
//sensors.c,66 :: 		if (*ptr1 != ' ')
	R4 <4> <- R4   (midx: 0)
//sensors.c,67 :: 		*ptr2++ = *ptr1;
4:   (midx: 0)
//sensors.c,68 :: 		ptr1++;
   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R1   (midx: 0)
//sensors.c,69 :: 		}
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	goto	2   (midx: 0)
3:   (midx: 0)
//sensors.c,70 :: 		ptr2--;
	R3 <4> <-  R4 - 1   (midx: 2)
	R4 <4> <- R3   (midx: 0)
//sensors.c,71 :: 		temp = *ptr2;
	R2 <1> <- *R3   (midx: 0)
   (midx: 0)
	R1 <1> <- R2   (midx: 0)
//sensors.c,72 :: 		*ptr2++ = '.';
	R2 <1> <- 46   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
	R2 <4> <-  R4 + 1   (midx: 2)
	R4 <4> <- R2   (midx: 0)
//sensors.c,73 :: 		*ptr2++ = temp;
   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
   (midx: 0)
	R3 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R1 <4> <- R3   (midx: 0)
//sensors.c,74 :: 		*ptr2++ = ' ';
	R2 <1> <- 32   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
	R3 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R3   (midx: 0)
//sensors.c,75 :: 		*ptr2++ = 'º';
	R2 <1> <- 186   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R1   (midx: 0)
//sensors.c,76 :: 		if (CF == 0)
	if ( R0 != 0) then goto 5   (midx: 0)
//sensors.c,77 :: 		*ptr2++ = 'C';
	R2 <1> <- 67   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R1   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	goto	6   (midx: 0)
5:   (midx: 0)
//sensors.c,79 :: 		*ptr2++ = 'F';
	R2 <1> <- 70   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R1 <4> <- R1   (midx: 0)
6:   (midx: 0)
//sensors.c,80 :: 		*ptr2 = 0;
   (midx: 0)
	R2 <1> <- 0   (midx: 0)
   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
//sensors.c,82 :: 		if (CF == 0)
   (midx: 0)
	if ( R0 != 0) then goto 7   (midx: 0)
//sensors.c,83 :: 		RedrawLabel(Sensors.Color, &Diagram5_Label2, 135, 50);
	R2 <4> <- addr(_Sensors+0)   (midx: 0)
	R2 <2> <- [R2]   (midx: 0)
	R3 <2> <- 50   (midx: 0)
	R1 <4> <- #_Diagram5_Label2   (midx: 0)
	R0 <2> <- R2   (midx: 0)
	R2 <2> <- 135   (midx: 0)
	CALL _RedrawLabel   (midx: 0)
	goto	8   (midx: 0)
7:   (midx: 0)
//sensors.c,85 :: 		RedrawLabel(Sensors.Color, &Diagram5_Label5, 75, 30);
	R2 <4> <- addr(_Sensors+0)   (midx: 0)
	R2 <2> <- [R2]   (midx: 0)
	R3 <2> <- 30   (midx: 0)
	R1 <4> <- #_Diagram5_Label5   (midx: 0)
	R0 <2> <- R2   (midx: 0)
	R2 <2> <- 75   (midx: 0)
	CALL _RedrawLabel   (midx: 0)
8:   (midx: 0)
  end
   (midx: 0)
sensors_Get_Temperature:
  begin   (midx: 0)
//sensors.c,95 :: 		static void Get_Temperature(){
sensors_Get_Temperature:
  begin   (midx: 0)
//sensors.c,100 :: 		temp = ADC3_Get_Sample(6);
	R0 <2> <- 6   (midx: 0)
	CALL _ADC3_Get_Sample   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
//sensors.c,101 :: 		temp = (unsigned long)(VREF * temp) / 4100;
   (midx: 0)
	R1 <4> <-  R0 shl 11   (midx: 2)
	R0 <4> <- 4100   (midx: 0)
	R0 <4> <-  R1 / R0   (midx: 2)
//sensors.c,102 :: 		temp = temp - 500;
	R0 <4> <-  R0 - 500   (midx: 2)
   (midx: 0)
	R1 <4> <- R0   (midx: 0)
//sensors.c,103 :: 		Display_Temp(temp, 0);
	R1 <4> <- PUSH(R1)   (midx: 255)
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	CALL sensors_Display_Temp   (midx: 0)
	R1 <4> <- POP   (midx: 255)
//sensors.c,106 :: 		temp2 = (float)(temp) / 10 * 1.8 + 32;
   (midx: 0)
	S1 <4> <- (type cast)R1   (midx: 0)
	S0 <4> <- 1.000000E+001   (midx: 0)
	S1 <4> <-  S1 / S0   (midx: 9)
	R0 <4> <- 1.800000E+000   (midx: 0)
	S0 <4> <- R0   (midx: 0)
	S1 <4> <-  S1 * S0   (midx: 9)
	R0 <4> <- 3.200000E+001   (midx: 0)
	S0 <4> <- R0   (midx: 0)
	S1 <4> <-  S1 + S0   (midx: 9)
//sensors.c,107 :: 		temp2 = temp2 * 10;
	S0 <4> <- 1.000000E+001   (midx: 0)
	S0 <4> <-  S1 * S0   (midx: 9)
//sensors.c,108 :: 		Display_Temp((unsigned long)temp2, 1);
	S0 <4> <- (type cast)S0   (midx: 0)
	R0 <4> <- S0   (midx: 0)
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	CALL sensors_Display_Temp   (midx: 0)
  end
   (midx: 0)
sensors_Dim_BackLight:
  begin   (midx: 0)
//sensors.c,118 :: 		static void Dim_BackLight(char intensity){
sensors_Dim_BackLight:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
   (midx: 0)
//sensors.c,120 :: 		if (intensity < current_intensity)
	R1 <4> <- addr(sensors_current_intensity)   (midx: 0)
	R1 <1> <- [R1]   (midx: 0)
	if ( R0 >= R1) then goto 9   (midx: 0)
//sensors.c,121 :: 		for (intensity_cnt = current_intensity; intensity_cnt > intensity; intensity_cnt --){
	R1 <4> <- addr(sensors_current_intensity)   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <1> <- [R1]   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R2 <1> <- R2   (midx: 0)
10:   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R2 <= R0) then goto 11   (midx: 0)
//sensors.c,122 :: 		TFT_Set_DBC_SSD1963(intensity_cnt);
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- PUSH(R2)   (midx: 255)
	R0 <1> <- R2   (midx: 0)
	CALL _TFT_Set_DBC_SSD1963   (midx: 0)
	R2 <1> <- POP   (midx: 255)
	R0 <1> <- POP   (midx: 255)
//sensors.c,123 :: 		Delay_ms(2);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//sensors.c,121 :: 		for (intensity_cnt = current_intensity; intensity_cnt > intensity; intensity_cnt --){
	R2 <1> <-  R2 - 1   (midx: 0)
	R2 <1> <- R2   (midx: 0)
//sensors.c,124 :: 		}
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R2 <1> <- R2   (midx: 0)
	goto	10   (midx: 0)
11:   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	goto	14   (midx: 0)
9:   (midx: 0)
//sensors.c,126 :: 		for (intensity_cnt = current_intensity; intensity_cnt < intensity; intensity_cnt ++){
	R1 <4> <- addr(sensors_current_intensity)   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <1> <- [R1]   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R2 <1> <- R2   (midx: 0)
15:   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R2 >= R0) then goto 16   (midx: 0)
//sensors.c,127 :: 		TFT_Set_DBC_SSD1963(intensity_cnt);
	R0 <1> <- PUSH(R0)   (midx: 255)
	R2 <1> <- PUSH(R2)   (midx: 255)
	R0 <1> <- R2   (midx: 0)
	CALL _TFT_Set_DBC_SSD1963   (midx: 0)
	R2 <1> <- POP   (midx: 255)
	R0 <1> <- POP   (midx: 255)
//sensors.c,128 :: 		Delay_ms(2);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//sensors.c,126 :: 		for (intensity_cnt = current_intensity; intensity_cnt < intensity; intensity_cnt ++){
	R2 <1> <-  R2 + 1   (midx: 0)
	R2 <1> <- R2   (midx: 0)
//sensors.c,129 :: 		}
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R2 <1> <- R2   (midx: 0)
	goto	15   (midx: 0)
16:   (midx: 0)
	R0 <1> <- R0   (midx: 0)
   (midx: 0)
14:   (midx: 0)
//sensors.c,130 :: 		current_intensity = intensity;
   (midx: 0)
	R1 <4> <- addr(sensors_current_intensity)   (midx: 0)
   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
  end
   (midx: 0)
sensors_Get_Light_Intensity:
  begin   (midx: 0)
//sensors.c,140 :: 		static unsigned int Get_Light_Intensity(){
sensors_Get_Light_Intensity:
  begin   (midx: 0)
//sensors.c,145 :: 		Light_Intensity = ADC3_Get_Sample(7);
	R0 <2> <- 7   (midx: 0)
	CALL _ADC3_Get_Sample   (midx: 0)
//sensors.c,146 :: 		Light_Intensity = Light_Intensity / 4;
	R0 <2> <-  R0 shr 2   (midx: 1)
   (midx: 0)
	R6 <2> <- R0   (midx: 0)
//sensors.c,148 :: 		if (Light_Intensity >= 1000)
	if ( R0 < 1000) then goto 36   (midx: 1)
//sensors.c,149 :: 		Light_Intensity = 1000;
   (midx: 0)
	R6 <2> <- 1000   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	goto	19   (midx: 0)
36:   (midx: 0)
//sensors.c,148 :: 		if (Light_Intensity >= 1000)
	R6 <2> <- R6   (midx: 0)
//sensors.c,149 :: 		Light_Intensity = 1000;
19:   (midx: 0)
//sensors.c,150 :: 		WordToStr(Light_Intensity, text);
   (midx: 0)
	R0 <4> <- addr(sensors_Get_Light_Intensity_text_L0)   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R0 <2> <- R6   (midx: 0)
	CALL _WordToStr   (midx: 0)
//sensors.c,151 :: 		ptr1 = text;
	R1 <4> <- addr(sensors_Get_Light_Intensity_text_L0)   (midx: 0)
   (midx: 0)
	R1 <4> <- R1   (midx: 0)
//sensors.c,152 :: 		ptr2 = Diagram5_Label4_Caption;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- #_Diagram5_Label4_Caption   (midx: 0)
	R2 <2> <- R6   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R3 <4> <- R3   (midx: 0)
//sensors.c,153 :: 		while (*ptr1){
20:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- *R1   (midx: 0)
	if (!R0) then goto 21   (midx: 0)
//sensors.c,154 :: 		if (*ptr1 != ' ')
	R0 <1> <- *R1   (midx: 0)
	if ( R0 = 32) then goto 37   (midx: 0)
//sensors.c,155 :: 		*ptr2++ = *ptr1;
	R0 <1> <- *R1   (midx: 0)
	[R3] <1> <- R0   (midx: 0)
	R3 <4> <-  R3 + 1   (midx: 2)
   (midx: 0)
	R3 <4> <- R3   (midx: 0)
	R3 <4> <- R3   (midx: 0)
	goto	22   (midx: 0)
37:   (midx: 0)
//sensors.c,154 :: 		if (*ptr1 != ' ')
	R3 <4> <- R3   (midx: 0)
//sensors.c,155 :: 		*ptr2++ = *ptr1;
22:   (midx: 0)
//sensors.c,156 :: 		ptr1++;
   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R1   (midx: 0)
//sensors.c,157 :: 		}
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R3 <4> <- R3   (midx: 0)
	goto	20   (midx: 0)
21:   (midx: 0)
//sensors.c,158 :: 		ptr2--;
   (midx: 0)
	R1 <4> <-  R3 - 1   (midx: 2)
   (midx: 0)
	R4 <4> <- R1   (midx: 0)
//sensors.c,159 :: 		temp = *ptr2;
	R0 <1> <- *R1   (midx: 0)
   (midx: 0)
	R3 <1> <- R0   (midx: 0)
//sensors.c,160 :: 		*ptr2++ = '.';
	R0 <1> <- 46   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
	R0 <4> <-  R4 + 1   (midx: 2)
	R4 <4> <- R0   (midx: 0)
//sensors.c,161 :: 		*ptr2++ = temp;
   (midx: 0)
	[R0] <1> <- R3   (midx: 0)
   (midx: 0)
	R1 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R3 <4> <- R1   (midx: 0)
//sensors.c,162 :: 		*ptr2++ = ' ';
	R0 <1> <- 32   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
	R1 <4> <-  R3 + 1   (midx: 2)
	R3 <4> <- R1   (midx: 0)
//sensors.c,163 :: 		*ptr2++ = '%';
	R0 <1> <- 37   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
   (midx: 0)
	R1 <4> <-  R3 + 1   (midx: 2)
//sensors.c,164 :: 		*ptr2 = 0;
	R0 <1> <- 0   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//sensors.c,165 :: 		RedrawLabel(Diagram5_Box1.Color, &Diagram5_Label4, 140, 50);
	R0 <4> <- addr(_Diagram5_Box1+28)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R2 <2> <- PUSH(R2)   (midx: 255)
	R3 <2> <- 50   (midx: 0)
	R2 <2> <- 140   (midx: 0)
	R1 <4> <- #_Diagram5_Label4   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _RedrawLabel   (midx: 0)
	R2 <2> <- POP   (midx: 255)
//sensors.c,167 :: 		return Light_Intensity;
   (midx: 0)
	R0 <2> <- R2   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_Sensors_Read:
  begin   (midx: 0)
//sensors.c,177 :: 		void Sensors_Read(){
_Sensors_Read:
  begin   (midx: 0)
//sensors.c,179 :: 		Sensors_counter++;
	R1 <4> <- addr(sensors_Sensors_counter)   (midx: 0)
	R0 <2> <- [R1]   (midx: 0)
	R0 <2> <-  R0 + 1   (midx: 1)
	[R1] <2> <- R0   (midx: 0)
//sensors.c,180 :: 		if (Sensors_counter > 2000){
	if ( R0 <= 2000) then goto 23   (midx: 5)
//sensors.c,181 :: 		Get_Temperature();
	CALL sensors_Get_Temperature   (midx: 0)
//sensors.c,182 :: 		Light_temp = Get_Light_Intensity();
	CALL sensors_Get_Light_Intensity   (midx: 0)
//sensors.c,184 :: 		if (Light_temp < 200){
	if ( R0 >= 200) then goto 24   (midx: 1)
//sensors.c,185 :: 		if (Light_intensity_cnt < 5)
	R0 <4> <- addr(sensors_Light_intensity_cnt)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	if ( R0 >= 5) then goto 25   (midx: 4)
//sensors.c,186 :: 		Light_intensity_cnt ++;
	R1 <4> <- addr(sensors_Light_intensity_cnt)   (midx: 0)
	R0 <1> <- [R1]   (midx: 0)
	R0 <1> <-  R0 + 1   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
25:   (midx: 0)
//sensors.c,187 :: 		}
	goto	26   (midx: 0)
24:   (midx: 0)
//sensors.c,189 :: 		if (Light_intensity_cnt > -5)
	R0 <4> <- addr(sensors_Light_intensity_cnt)   (midx: 0)
	R1 <1> <- [R0]   (midx: 0)
	R0 <4> <- -5   (midx: 0)
	if ( R1 <= R0) then goto 27   (midx: 4)
//sensors.c,190 :: 		Light_intensity_cnt --;
	R1 <4> <- addr(sensors_Light_intensity_cnt)   (midx: 0)
	R0 <1> <- [R1]   (midx: 0)
	R0 <1> <-  R0 - 1   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
27:   (midx: 0)
26:   (midx: 0)
//sensors.c,192 :: 		if ((Light_intensity_cnt > 4) && (FULL_BackLight == 1)){
	R0 <4> <- addr(sensors_Light_intensity_cnt)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	if ( R0 <= 4) then goto 41   (midx: 4)
	R0 <4> <- addr(sensors_FULL_BackLight)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	if ( R0 != 1) then goto 40   (midx: 4)
39:   (midx: 0)
//sensors.c,193 :: 		Dim_BackLight(70);
	R0 <1> <- 70   (midx: 0)
	CALL sensors_Dim_BackLight   (midx: 0)
//sensors.c,194 :: 		FULL_BackLight = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(sensors_FULL_BackLight)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//sensors.c,195 :: 		Light_intensity_cnt = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(sensors_Light_intensity_cnt)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//sensors.c,196 :: 		}
	goto	31   (midx: 0)
//sensors.c,192 :: 		if ((Light_intensity_cnt > 4) && (FULL_BackLight == 1)){
41:   (midx: 0)
40:   (midx: 0)
//sensors.c,197 :: 		else if ((Light_intensity_cnt < -4) && (FULL_BackLight == 0)){
	R0 <4> <- addr(sensors_Light_intensity_cnt)   (midx: 0)
	R1 <1> <- [R0]   (midx: 0)
	R0 <4> <- -4   (midx: 0)
	if ( R1 >= R0) then goto 43   (midx: 4)
	R0 <4> <- addr(sensors_FULL_BackLight)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	if ( R0 != 0) then goto 42   (midx: 4)
38:   (midx: 0)
//sensors.c,198 :: 		Dim_BackLight(255);
	R0 <1> <- 255   (midx: 0)
	CALL sensors_Dim_BackLight   (midx: 0)
//sensors.c,199 :: 		FULL_BackLight = 1;
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(sensors_FULL_BackLight)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//sensors.c,200 :: 		Light_intensity_cnt = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(sensors_Light_intensity_cnt)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//sensors.c,197 :: 		else if ((Light_intensity_cnt < -4) && (FULL_BackLight == 0)){
43:   (midx: 0)
42:   (midx: 0)
//sensors.c,201 :: 		}
31:   (midx: 0)
//sensors.c,203 :: 		Sensors_counter = 0;
	R1 <2> <- 0   (midx: 0)
	R0 <4> <- addr(sensors_Sensors_counter)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
//sensors.c,204 :: 		}
23:   (midx: 0)
  end
   (midx: 0)
_Stop_sensors:
  begin   (midx: 0)
//sensors.c,214 :: 		void Stop_sensors(){
_Stop_sensors:
  begin   (midx: 0)
//sensors.c,215 :: 		Dim_BackLight(0);
	R0 <1> <- 0   (midx: 0)
	CALL sensors_Dim_BackLight   (midx: 0)
  end
   (midx: 0)
