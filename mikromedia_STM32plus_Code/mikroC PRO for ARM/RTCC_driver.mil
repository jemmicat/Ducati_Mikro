_RTC_Init:
  begin   (midx: 0)
//RTCC_driver.c,31 :: 		void RTC_Init(){
_RTC_Init:
  begin   (midx: 0)
//RTCC_driver.c,32 :: 		RCC_APB1ENR.PWREN = 1;            // Enable RTC clock
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(RCC_APB1ENR)   (midx: 0)
	[R0] <0> <- R1   (midx: 20)
//RTCC_driver.c,33 :: 		if (RCC_BDCR.RTCEN == 0){         // if RTC is disabled ...
	R1 <4> <- addr(RCC_BDCR)   (midx: 0)
	R0 <4> <- [R1]   (midx: 0)
	if (R0) then goto 0   (midx: 21)
//RTCC_driver.c,34 :: 		PWR_CR.DBP = 1;                 // Allow access to RTC
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(PWR_CR)   (midx: 0)
	[R0] <0> <- R1   (midx: 20)
//RTCC_driver.c,36 :: 		RTC_WPR = 0xCA;                 //unlock write protection
	R1 <4> <- 202   (midx: 0)
	R0 <4> <- addr(RTC_WPR)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//RTCC_driver.c,37 :: 		RTC_WPR = 0x53;                 //unlock write protection
	R1 <4> <- 83   (midx: 0)
	R0 <4> <- addr(RTC_WPR)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//RTCC_driver.c,39 :: 		RCC_BDCR = 0x00010000;          // make it possible to change clock source
	R1 <4> <- 65536   (midx: 0)
	R0 <4> <- addr(RCC_BDCR)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//RTCC_driver.c,40 :: 		RCC_BDCR = 0x00008101;          // RTCEN = 1, LSE, LSEON
	R1 <4> <- 33025   (midx: 0)
	R0 <4> <- addr(RCC_BDCR)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//RTCC_driver.c,41 :: 		}
0:   (midx: 0)
//RTCC_driver.c,42 :: 		while(RTC_ISR.RSF != 1){}         // Wait for RTC APB registers synchronisation
1:   (midx: 0)
	R1 <4> <- addr(RTC_ISR)   (midx: 0)
	R0 <4> <- [R1]   (midx: 0)
	if (R0) then goto 2   (midx: 21)
	goto	1   (midx: 0)
2:   (midx: 0)
//RTCC_driver.c,44 :: 		while(RCC_BDCR.LSERDY != 1){};    // Wait till LSE is ready
3:   (midx: 0)
	R1 <4> <- addr(RCC_BDCR)   (midx: 0)
	R0 <4> <- [R1]   (midx: 0)
	if (R0) then goto 4   (midx: 21)
	goto	3   (midx: 0)
4:   (midx: 0)
//RTCC_driver.c,46 :: 		RTC_WPR = 0xFF;
	R1 <4> <- 255   (midx: 0)
	R0 <4> <- addr(RTC_WPR)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
  end
   (midx: 0)
_Set_RTC:
  begin   (midx: 0)
//RTCC_driver.c,57 :: 		void Set_RTC(TTime *RTCC_Time){
_Set_RTC:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
   (midx: 0)
//RTCC_driver.c,60 :: 		PWR_CR.DBP = 1;
	R2 <1> <- 1   (midx: 0)
	R1 <4> <- addr(PWR_CR)   (midx: 0)
	[R1] <0> <- R2   (midx: 20)
//RTCC_driver.c,62 :: 		RTC_WPR = 0xCA;                   //unlock write protection
	R2 <4> <- 202   (midx: 0)
	R1 <4> <- addr(RTC_WPR)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//RTCC_driver.c,63 :: 		RTC_WPR = 0x53;                   //unlock write protection
	R2 <4> <- 83   (midx: 0)
	R1 <4> <- addr(RTC_WPR)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//RTCC_driver.c,64 :: 		RTC_ISR = 0x00000080;             //enter initialization mode  bit 7
	R2 <4> <- 128   (midx: 0)
	R1 <4> <- addr(RTC_ISR)   (midx: 0)
   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
	R4 <4> <- R0   (midx: 0)
//RTCC_driver.c,65 :: 		while(RTC_ISR.INITF != 1){};      // bit 6
5:   (midx: 0)
   (midx: 0)
	R2 <4> <- addr(RTC_ISR)   (midx: 0)
	R1 <4> <- [R2]   (midx: 0)
	if (R1) then goto 6   (midx: 21)
	R4 <4> <- R4   (midx: 0)
	goto	5   (midx: 0)
6:   (midx: 0)
//RTCC_driver.c,67 :: 		RTC_PRER = 0x7f00ff;              //  set   SynchPrediv to FF and AsynchPrediv to 7F*/
	R2 <4> <- 8323327   (midx: 0)
	R1 <4> <- addr(RTC_PRER)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//RTCC_driver.c,69 :: 		temp = (unsigned long)Dec2Bcd(RTCC_Time->hours) << 16;
	R1 <4> <-  R4 + 3   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	CALL _Dec2Bcd   (midx: 0)
	R5 <4> <- R0   (midx: 0)
	R5 <4> <-  R5 shl 16   (midx: 2)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
//RTCC_driver.c,70 :: 		temp += (unsigned long)Dec2BCD(RTCC_Time->minutes) << 8;
	R1 <4> <-  R4 + 2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	CALL _Dec2Bcd   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R1 <4> <-  R1 shl 8   (midx: 2)
	R5 <4> <-  R5 + R1   (midx: 2)
	R5 <4> <- R5   (midx: 0)
//RTCC_driver.c,71 :: 		temp += (unsigned long)Dec2BCD(RTCC_Time->seconds);
	R1 <4> <-  R4 + 1   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	CALL _Dec2Bcd   (midx: 0)
	R1 <4> <- R0   (midx: 0)
   (midx: 0)
	R2 <4> <-  R5 + R1   (midx: 2)
//RTCC_driver.c,72 :: 		temp += (unsigned long)(RTCC_Time->ampm) << 22;
	R1 <1> <- *R4   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R1 <4> <-  R1 shl 22   (midx: 2)
	R2 <4> <-  R2 + R1   (midx: 2)
//RTCC_driver.c,74 :: 		RTC_TR = temp;
	R1 <4> <- addr(RTC_TR)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//RTCC_driver.c,76 :: 		temp = (unsigned long)Dec2Bcd(RTCC_Time->day) << 16;
	R1 <4> <-  R4 + 4   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	CALL _Dec2Bcd   (midx: 0)
	R5 <4> <- R0   (midx: 0)
	R5 <4> <-  R5 shl 16   (midx: 2)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
//RTCC_driver.c,77 :: 		temp += (unsigned long)Dec2BCD(RTCC_Time->month) << 8;
	R1 <4> <-  R4 + 5   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	CALL _Dec2Bcd   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R1 <4> <-  R1 shl 8   (midx: 2)
	R5 <4> <-  R5 + R1   (midx: 2)
	R5 <4> <- R5   (midx: 0)
//RTCC_driver.c,78 :: 		temp += (unsigned long)Dec2BCD(RTCC_Time->year);
   (midx: 0)
	R1 <4> <-  R4 + 6   (midx: 2)
	R1 <2> <- *R1   (midx: 0)
	R1 <1> <- R1   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	CALL _Dec2Bcd   (midx: 0)
	R1 <4> <- R0   (midx: 0)
   (midx: 0)
	R2 <4> <-  R5 + R1   (midx: 2)
//RTCC_driver.c,80 :: 		RTC_DR = temp;           // set date
	R1 <4> <- addr(RTC_DR)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//RTCC_driver.c,81 :: 		RTC_CRbits.FMT = 1;
	R2 <1> <- 1   (midx: 0)
	R1 <4> <- addr(RTC_CRbits+0)   (midx: 0)
	[R1] <0> <- R2   (midx: 20)
//RTCC_driver.c,82 :: 		RTC_CRbits.WCKSEL = 0;   // set FMT 12H format
	R3 <1> <- 0   (midx: 0)
	R2 <4> <- addr(RTC_CRbits+0)   (midx: 0)
	R1 <1> <- [R2]   (midx: 0)
	TI59 <1> <- R3   (midx: 0)
	[R2] <1> <- TI59   (midx: 0)
//RTCC_driver.c,84 :: 		RTC_ISR = 0x00000000;    //exit initialization mode
	R2 <4> <- 0   (midx: 0)
	R1 <4> <- addr(RTC_ISR)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//RTCC_driver.c,86 :: 		RTC_WPR = 0xFF;          // Enable the write protection for RTC registers
	R2 <4> <- 255   (midx: 0)
	R1 <4> <- addr(RTC_WPR)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
  end
   (midx: 0)
_RTCC_Read:
  begin   (midx: 0)
//RTCC_driver.c,96 :: 		char RTCC_Read(TTime *RTCC_Time){
_RTCC_Read:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- R0   (midx: 0)
   (midx: 0)
//RTCC_driver.c,97 :: 		char temp = 0;
   (midx: 0)
   (midx: 0)
	R0 <-initialize(0)   (midx: 0)
//RTCC_driver.c,99 :: 		RTC_Time = RTC_TR;
	R1 <4> <- addr(RTC_TR)   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R3 <4> <- addr(_RTC_Time)   (midx: 0)
	[R3] <4> <- R1   (midx: 0)
//RTCC_driver.c,100 :: 		RTC_Date = RTC_DR;
	R1 <4> <- addr(RTC_DR)   (midx: 0)
	R2 <4> <- [R1]   (midx: 0)
	R1 <4> <- addr(_RTC_Date)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//RTCC_driver.c,102 :: 		if(RTC_Time != old_RTC_Time){
	R1 <4> <- addr(_old_RTC_Time)   (midx: 0)
	R2 <4> <- [R1]   (midx: 0)
	R1 <4> <- R3   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
   (midx: 0)
	if ( R1 = R2) then goto 9   (midx: 2)
//RTCC_driver.c,103 :: 		old_RTC_Time = RTC_Time;
	R3 <4> <- addr(_RTC_Time)   (midx: 0)
	FLOC_RTCC_Read+12 <4> <- R3   (midx: 0)
	R2 <4> <- [R3]   (midx: 0)
	R1 <4> <- addr(_old_RTC_Time)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//RTCC_driver.c,105 :: 		RTCC_Time->ampm = (short)((RTC_Time & 0x400000) >> 22);
	R1 <4> <- R3   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R1 <4> <-  R1 & 4194304   (midx: 2)
	R1 <4> <-  R1 shr 22   (midx: 2)
	R1 <1> <- R1   (midx: 0)
	[R4] <1> <- R1   (midx: 0)
//RTCC_driver.c,106 :: 		RTCC_Time->hours = Bcd2Dec((short)((RTC_Time & 0x3f0000) >> 16));
	R1 <4> <-  R4 + 3   (midx: 2)
	FLOC_RTCC_Read+8 <4> <- R1   (midx: 0)
	R1 <4> <- R3   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R1 <4> <-  R1 & 4128768   (midx: 2)
	R1 <4> <-  R1 shr 16   (midx: 2)
	R0 <1> <- R1   (midx: 0)
	CALL _Bcd2Dec   (midx: 0)
	R1 <4> <- FLOC_RTCC_Read+8   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//RTCC_driver.c,107 :: 		RTCC_Time->minutes = Bcd2Dec((short)((RTC_Time & 0x007f00) >> 8));
	R2 <4> <-  R4 + 2   (midx: 2)
	R1 <4> <- FLOC_RTCC_Read+12   (midx: 0)
	FLOC_RTCC_Read+8 <4> <- R2   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R1 <4> <-  R1 & 32512   (midx: 2)
	R1 <4> <-  R1 shr 8   (midx: 2)
	R0 <1> <- R1   (midx: 0)
	CALL _Bcd2Dec   (midx: 0)
	R1 <4> <- FLOC_RTCC_Read+8   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//RTCC_driver.c,108 :: 		RTCC_Time->seconds = Bcd2Dec((short)(RTC_Time & 0x0000ff));
	R2 <4> <-  R4 + 1   (midx: 2)
	R1 <4> <- FLOC_RTCC_Read+12   (midx: 0)
	FLOC_RTCC_Read+8 <4> <- R2   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R1 <4> <-  R1 & 255   (midx: 2)
	R0 <1> <- R1   (midx: 0)
	CALL _Bcd2Dec   (midx: 0)
	R1 <4> <- FLOC_RTCC_Read+8   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//RTCC_driver.c,110 :: 		temp = 1;
   (midx: 0)
   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	R0 <1> <- R0   (midx: 0)
//RTCC_driver.c,111 :: 		}
	goto	7   (midx: 0)
9:   (midx: 0)
//RTCC_driver.c,102 :: 		if(RTC_Time != old_RTC_Time){
	R0 <1> <- R0   (midx: 0)
//RTCC_driver.c,111 :: 		}
7:   (midx: 0)
//RTCC_driver.c,113 :: 		if(RTC_Date != old_RTC_Date){
   (midx: 0)
	R1 <4> <- addr(_old_RTC_Date)   (midx: 0)
	R2 <4> <- [R1]   (midx: 0)
	R1 <4> <- addr(_RTC_Date)   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
   (midx: 0)
	if ( R1 = R2) then goto 10   (midx: 2)
//RTCC_driver.c,114 :: 		old_RTC_Date = RTC_Date;
	R3 <4> <- addr(_RTC_Date)   (midx: 0)
	FLOC_RTCC_Read+12 <4> <- R3   (midx: 0)
	R2 <4> <- [R3]   (midx: 0)
	R1 <4> <- addr(_old_RTC_Date)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//RTCC_driver.c,116 :: 		RTCC_Time->year = Bcd2Dec((short)((RTC_Date & 0x3f0000) >> 16));
	R1 <4> <-  R4 + 6   (midx: 2)
	FLOC_RTCC_Read+8 <4> <- R1   (midx: 0)
	R1 <4> <- R3   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R1 <4> <-  R1 & 4128768   (midx: 2)
	R1 <4> <-  R1 shr 16   (midx: 2)
	R0 <1> <- R1   (midx: 0)
	CALL _Bcd2Dec   (midx: 0)
	R1 <4> <- FLOC_RTCC_Read+8   (midx: 0)
	[R1] <2> <- R0   (midx: 0)
//RTCC_driver.c,117 :: 		RTCC_Time->month = Bcd2Dec((short)((RTC_Date & 0x001f00) >> 8));
	R2 <4> <-  R4 + 5   (midx: 2)
	R1 <4> <- FLOC_RTCC_Read+12   (midx: 0)
	FLOC_RTCC_Read+8 <4> <- R2   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R1 <4> <-  R1 & 7936   (midx: 2)
	R1 <4> <-  R1 shr 8   (midx: 2)
	R0 <1> <- R1   (midx: 0)
	CALL _Bcd2Dec   (midx: 0)
	R1 <4> <- FLOC_RTCC_Read+8   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//RTCC_driver.c,118 :: 		RTCC_Time->day = Bcd2Dec((short)(RTC_Date & 0x0000ff));
   (midx: 0)
	R2 <4> <-  R4 + 4   (midx: 2)
	R1 <4> <- FLOC_RTCC_Read+12   (midx: 0)
	FLOC_RTCC_Read+8 <4> <- R2   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R1 <4> <-  R1 & 255   (midx: 2)
	R0 <1> <- R1   (midx: 0)
	CALL _Bcd2Dec   (midx: 0)
	R1 <4> <- FLOC_RTCC_Read+8   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//RTCC_driver.c,120 :: 		temp = 1;
   (midx: 0)
   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	R0 <1> <- R0   (midx: 0)
//RTCC_driver.c,121 :: 		}
	goto	8   (midx: 0)
10:   (midx: 0)
//RTCC_driver.c,113 :: 		if(RTC_Date != old_RTC_Date){
	R0 <1> <- R0   (midx: 0)
//RTCC_driver.c,121 :: 		}
8:   (midx: 0)
//RTCC_driver.c,122 :: 		return temp;
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
